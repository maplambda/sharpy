class html(object):
    """ html elements represented as functions """

    def token(self, tag, attrs):
        return lambda o : (tag, attrs, o)

    def title(self): 
        return self.token('title', {}) 

    def head(self, **attrs): 
        return self.token('head', {}) 

    def ul(self, **attrs): 
        return self.token('ul', {}) 

    def li(self, **attrs): 
        return self.token('li', {}) 

    def a(self, **attrs):
        return self.token('a', attrs)

    def div(self, **attrs):
        return self.token('div', attrs)

    def p(self, **attrs):
        return self.token('p', attrs)

    def stylesheet(self, **attrs):
        attrs["type"] = "text/css"
        attrs["rel"] = "stylesheet"
        return self.token('link', attrs)

    def strong(self, **attrs):
        return self.token('strong', {})

    def br(self, **attrs):
        return self.token('br', {})

    def body(self, **attrs):
        return self.token('body', attrs)

    def h1(self, **attrs):
        return self.token('h1', attrs)

    def h2(self, **attrs):
        return self.token('h2', attrs)

    def h3(self, **attrs):
        return self.token('h3', attrs)

    def h4(self, **attrs):
        return self.token('h4', attrs)

    def html(self, **attrs):
        return self.token('html', attrs)

    def dumps(self, document):
        doc = self.build_tree()
        return doc.encode(document)

    class build_tree(object):
        def encode(self, o):
            chunks = self.iterencode(o)
            return '\n'.join(chunks)

        def iterencode(self, o):
            iterencode = self._make_iterencode()
            return iterencode(self, o)

        def _make_iterencode(self):
            def _iter_attrs(self, attr):
                for (k,v) in attr:
                    yield ''.join([k.replace('_',''), '="', v, '"'])
    
            def flatten_attrs(self, att):
                t = list()  
                if len(att) > 0:
                    t.append(' ')
                    t.append(' '.join(_iter_attrs(self, att.items())))

                return ''.join(t)

            def _iterencode_iter(self, itr, open_tags=None):
                if hasattr(itr, 'func_name'):
                    yield '<' + itr(None)[0] + flatten_attrs(self, itr(None)[1]) + '/>'

                if not open_tags:
                    open_tags = list()

                if type(itr)==str:
                    if itr.find(" ") > -1:
                        yield itr
                    else:
                        open_tags.append(itr[0])
                        yield '<' + itr[0] + flatten_attrs(self, itr[1]) + '>'

                if hasattr(itr, '__iter__'):
                    open_tags.append(itr[0])
                    yield '<' + itr[0] + flatten_attrs(self, itr[1]) + '>'
                    if type(itr[2]) == str:
                        yield itr[2]
                    else:
                        for i in itr[2]:
                            chunks = _iterencode_iter(self, i) 
                            for chunk in chunks:
                                yield chunk

                for tag in open_tags:
                    yield '</' + open_tags.pop() + '>'

            def _iterencode(self, o):
                for chunk in _iterencode_iter(self,o):
                    yield chunk            

            return _iterencode

if __name__ == '__main__':
    h = html()
    page = h.html()([
        h.head()([h.title()('Title')]),
        h.body()([
            h.h1()('htmlgen')]),
            h.p(id='intro')('a paragraph generated by the sharpy html dsl')
     ])

    print h.dumps(page)
